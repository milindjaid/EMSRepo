{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Components/create-employee/create-employee.component.html","webpack:///src/app/Components/employees/employees.component.html","webpack:///src/app/Components/login/login.component.html","webpack:///src/app/Components/sign-up/sign-up.component.html","webpack:///src/app/app.component.html","webpack:///src/app/CommonClasses/common-url.ts","webpack:///src/app/Components/create-employee/create-employee.component.css","webpack:///src/app/Components/create-employee/create-employee.component.ts","webpack:///src/app/Components/employees/employees.component.css","webpack:///src/app/Components/employees/employees.component.ts","webpack:///src/app/Components/login/login.component.css","webpack:///src/app/Components/login/login.component.ts","webpack:///src/app/Components/sign-up/sign-up.component.css","webpack:///src/app/Components/sign-up/sign-up.component.ts","webpack:///src/app/Services/common-validation.service.ts","webpack:///src/app/Services/employee.service.ts","webpack:///src/app/Services/login.service.ts","webpack:///src/app/Services/sign-up.service.ts","webpack:///src/app/Services/snack-bar.service.ts","webpack:///src/app/Services/token-interceptor.service.ts","webpack:///src/app/Services/token-management.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.css","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","CommonUrl","BaseUrl","CreateEmployeeComponent","formBuilder","employeeService","matDialog","commonValidationService","snackBarService","employeesFormGroup","commonEmployeeFormGroup","EmployeeFormGroup","validateWholeFormGroup","valid","closeAll","get","value","submitEmployeeRecord","subscribe","flag","openSnackBar","setStateToSubject","onClear","updateEmployeeRecord","InitializeCommonFormGroup","selector","template","EmployeesComponent","tokenService","router","matDialogConfig","getStateFromSubject","StateChangeFlag","getAllEmployeesList","EmployeesList","clearTokenFromStorage","navigateByUrl","matdialogConfig","disableClose","autoFocus","height","width","setcommonEmployeeFormGroup","open","getAllEmployeeRecord","employeeList","console","log","employeeDetails","populateForm","empTrId","deleteEmployeeRecord","Flag","index","employee","employeeId","LoginComponent","loginService","checkTokenAvailability","InitializeLoginFormGroup","loginFormGroup","group","userName","password","formGroup","authenticateUser","setTokenToLocalStorage","alert","error","SignUpComponent","signUpService","InitailizeFormGroup","registerFormGroup","firstName","lastName","emailAddress","address","dob","company","registerRecords","CommonValidationServiceService","subject","employeefirstName","employeelastName","employeeAddress","employeeDob","employeemMobileNo","employeeCity","state","next","setValue","Object","forEach","formControlKey","formControl","field","control","markAsDirty","onlySelf","providedIn","EmployeeService","http","getBaseHttpUrl","post","responseType","put","params","set","LoginService","userCredintials","SignUpService","registerDetails","SnackBarService","snackBar","horizontalPosition","verticalPosition","snackBarAutoHide","message","snackBarConfig","duration","parseInt","panelClass","snackBarRef","TokenInterceptorService","request","modifiedRequest","addTokenToRequest","handle","pipe","errorResponse","errorMassage","ErrorEvent","status","url","token","getTokenFromLocalStorage","clone","setHeaders","TokenManagementService","localStorage","getItem","Token","setItem","removeItem","routes","path","redirectTo","pathMatch","component","AppRoutingModule","imports","forRoot","AppComponent","title","AppModule","declarations","providers","provide","useClass","multi","bootstrap","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"\\n<button id=\\\"close\\\" (click)=\\\"CloseEmployeePopUp()\\\" class=\\\"registerbtn\\\">Close</button>\\n\\n<form [formGroup]=\\\"employeesFormGroup\\\" class=\\\"container\\\" style=\\\"text-align: center\\\">\\n    <h2>Create Employee</h2>\\n    <label style=\\\"color: blue\\\"><b>Employee ID :</b></label>\\n      <div>\\n      <input type=\\\"text\\\" formControlName=\\\"employeeId\\\" > \\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeId.invalid && (employeesFormGroup.controls.employeeId.dirty||\\n      employeesFormGroup.controls.employeeId.touched )\\\">\\n     <div *ngIf=\\\"employeesFormGroup.controls.employeeId.errors.required\\\"  class=\\\"error_msg\\\">\\n      Employee Id is required.\\n     </div>    \\n     </div>\\n    </div>\\n    <label style=\\\"color: blue\\\"><b> First Name :</b></label>\\n    <div>\\n    <input type=\\\"text\\\" formControlName=\\\"employeefirstName\\\" >\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeefirstName.invalid && (employeesFormGroup.controls.employeefirstName.dirty||\\n      employeesFormGroup.controls.employeefirstName.touched )\\\">\\n     <div *ngIf=\\\"employeesFormGroup.controls.employeefirstName.errors.required\\\"  class=\\\"error_msg\\\">\\n      First Name  is required.\\n     </div>    \\n     </div>\\n     </div>\\n      <br>\\n      <br>\\n      <label style=\\\"color: blue\\\"><b> Last Name :</b> </label>\\n      <div>\\n      <input type=\\\"text\\\" formControlName=\\\"employeelastName\\\" >\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeelastName.invalid && (employeesFormGroup.controls.employeelastName.dirty||\\n      employeesFormGroup.controls.employeelastName.touched )\\\">\\n     <div *ngIf=\\\"employeesFormGroup.controls.employeelastName.errors.required\\\"  class=\\\"error_msg\\\">\\n      Last Name is required.\\n     </div>    \\n     </div>\\n     </div>\\n       <label style=\\\"color: blue\\\"><b> Address : </b></label>\\n       <div>\\n      <input type=\\\"text\\\" formControlName=\\\"employeeAddress\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeAddress.invalid && (employeesFormGroup.controls.employeeAddress.dirty||\\n       employeesFormGroup.controls.employeeAddress.touched )\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeAddress.errors.required\\\"  class=\\\"error_msg\\\">\\n         Address is required.\\n      </div>    \\n      </div>\\n      </div>\\n       <br>\\n       <br>\\n       <label style=\\\"color: blue\\\"><b>Date Of Birth : </b></label>\\n       <div>\\n      <input type=\\\"date\\\" formControlName=\\\"employeeDob\\\" >\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeDob.invalid && (employeesFormGroup.controls.employeeDob.dirty||\\n       employeesFormGroup.controls.employeeDob.touched )\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeDob.errors.required\\\"  class=\\\"error_msg\\\">\\n         Date Of Birth is required.\\n      </div>    \\n      </div>\\n      </div>\\n      \\n      <label style=\\\"color: blue\\\"><b>  Mobile No. :</b> </label>\\n      <div>\\n      <input type=\\\"text\\\" formControlName=\\\"employeemMobileNo\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeemMobileNo.invalid && (employeesFormGroup.controls.employeemMobileNo.dirty||\\n       employeesFormGroup.controls.employeemMobileNo.touched )\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeemMobileNo.errors.required\\\"  class=\\\"error_msg\\\">\\n         Mobile No. is required.\\n      </div>    \\n      </div>\\n      </div>\\n       <br>\\n       <br>\\n       <div style=\\\"position: relative;right: 112px;\\\">\\n      <label style=\\\"color: blue;\\\"><b>  City : </b></label>\\n      <input type=\\\"text\\\" formControlName=\\\"employeeCity\\\" >\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeCity.invalid && (employeesFormGroup.controls.employeeCity.dirty||\\n       employeesFormGroup.controls.employeeCity.touched )\\\">\\n      <div *ngIf=\\\"employeesFormGroup.controls.employeeCity.errors.required\\\"  class=\\\"error_msg\\\">\\n         City  is required.\\n      </div>    \\n      </div>\\n      </div>\\n       <br>\\n       <div>\\n      <button id=\\\"Submit\\\" (click)=\\\"SubmitEmployeeRecords(employeesFormGroup)\\\" class=\\\"registerbtn\\\">Save </button>\\n      <button id=\\\"Submit\\\" (click)=\\\"onClear()\\\" class=\\\"registerbtn\\\" style=\\\"left: 11px;\\n      position: relative;\\\">Clear </button>\\n      </div>\\n  \\n  </form>\\n\";","export default \"<button id=\\\"Logout\\\" (click)=\\\"logout()\\\" class=\\\"registerbtn logoutButton\\\">Log Out </button>\\n\\n<button id=\\\"Logout\\\" (click)=\\\"createEmployee()\\\" class=\\\"registerbtn createButton\\\" >Create Employee </button>\\n<br>\\n<br>\\n<br>\\n<hr>\\n<div>\\n<table>\\n<thead>\\n    <tr>\\n    <th>Employee ID</th>\\n    <th>First Name</th>\\n    <th>Last Name</th>\\n    <th>Address</th>\\n    <th>Date Of Birth</th>\\n    <th>Mobile No.</th>\\n    <th>City</th>\\n    </tr>\\n</thead>\\n<tbody>\\n<tr *ngFor=\\\"let employee of EmployeesList; let i=index;trackBy:trackByEmployeeId\\\">\\n<td>{{employee.employeeId}}</td>\\n<td>{{employee.employeefirstName}}</td>\\n<td>{{employee.employeelastName}}</td>\\n<td>{{employee.employeeAddress}}</td>\\n<td>{{employee.employeeDob}}</td>\\n<td>{{employee.employeemMobileNo}}</td>\\n<td>{{employee.employeeCity}}</td>\\n<td><button id=\\\"update\\\" (click)=\\\"onUpdate(employee)\\\" class=\\\"registerbtn\\\" style=\\\"height: 35px;width: 85px\\\" >Update </button></td>\\n<td><button id=\\\"delete\\\" (click)=\\\"onDelete(employee)\\\" class=\\\"registerbtn\\\" style=\\\"height: 35px;width: 85px\\\" >Delete </button></td>\\n</tr>\\n</tbody>\\n</table>\\n</div>\\n\";","export default \"<form [formGroup]=\\\"loginFormGroup\\\" style=\\\"text-align: center\\\" class=\\\"container\\\">\\n\\n    <label style=\\\"color: blue\\\"> <b> User Name:</b></label>\\n    <div>\\n    <input type=\\\"text\\\" formControlName=\\\"userName\\\" >\\n    <div *ngIf=\\\"loginFormGroup.controls.userName.invalid && (loginFormGroup.controls.userName.dirty||\\n    loginFormGroup.controls.userName.touched )\\\">\\n    <div *ngIf=\\\"loginFormGroup.controls.userName.errors.required\\\"  class=\\\"error_msg\\\">\\n                User Name is required.\\n    </div>    \\n    </div>\\n    </div>\\n    <br>\\n    <br>\\n    <label style=\\\"color: blue\\\"><b>Password: </b></label>\\n    <div>\\n    <input type=\\\"password\\\" formControlName=\\\"password\\\" >\\n    <div *ngIf=\\\"loginFormGroup.controls.password.invalid && (loginFormGroup.controls.password.dirty||\\n    loginFormGroup.controls.password.touched )\\\">\\n    <div *ngIf=\\\"loginFormGroup.controls.password.errors.required\\\" class=\\\"error_msg\\\" >\\n                Password is required.\\n    </div>    \\n    </div>\\n    </div>\\n     <br>\\n     <br>\\n     <hr style=\\\"width: 50%\\\">\\n    <button id=\\\"Submit\\\" (click)=\\\"authencateCredentials(loginFormGroup)\\\" class=\\\"registerbtn\\\">Login</button>\\n\\n    <br>\\n     Create an account? <a (click)=\\\"NavigateToSignUp()\\\" >Sign up</a>\\n</form>\\n\\n\";","export default \"<form [formGroup]=\\\"registerFormGroup\\\" class=\\\"container\\\" style=\\\"text-align: center\\\">\\n\\n    <h2>Register</h2>\\n    <p>Please fill in this form to create an account.</p>\\n    <hr style=\\\"width: 50%\\\">\\n\\n    <label style=\\\"color: blue\\\"><b>  First Name :</b>:</label>\\n    <div>\\n      <input type=\\\"text\\\" formControlName=\\\"firstName\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.firstName.invalid && (registerFormGroup.controls.firstName.dirty||\\n            registerFormGroup.controls.firstName.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.firstName.errors.required\\\"  class=\\\"error_msg\\\">\\n            First Name is required.\\n      </div>    \\n    </div>\\n    </div>\\n      <br>\\n      <br>\\n      <label style=\\\"color: blue\\\"><b> Last Name :</b> </label>\\n      <input type=\\\"password\\\" formControlName=\\\"lastName\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.lastName.invalid && (registerFormGroup.controls.lastName.dirty||\\n            registerFormGroup.controls.lastName.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.lastName.errors.required\\\"  class=\\\"error_msg\\\">\\n            Last Name is required.\\n      </div>    \\n    </div>\\n       <br>\\n       <br>\\n       <label style=\\\"color: blue\\\"><b> Password : </b></label>\\n      <input type=\\\"password\\\" formControlName=\\\"password\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.password.invalid && (registerFormGroup.controls.password.dirty||\\n            registerFormGroup.controls.password.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.password.errors.required\\\"  class=\\\"error_msg\\\">\\n            Password is required.\\n      </div>    \\n    </div>\\n       <br>\\n       <br>\\n       <label style=\\\"color: blue\\\"><b>    Email : </b></label>\\n      <input type=\\\"text\\\" formControlName=\\\"email\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.email.invalid && (registerFormGroup.controls.email.dirty||\\n            registerFormGroup.controls.email.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.email.errors.required\\\"  class=\\\"error_msg\\\">\\n            Email is required.\\n      </div>    \\n      </div>\\n       <br>\\n       <br>\\n       <label style=\\\"color: blue\\\"><b>  Address :</b> </label>\\n       <div>\\n      <input type=\\\"text\\\" formControlName=\\\"address\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.address.invalid && (registerFormGroup.controls.address.dirty||\\n            registerFormGroup.controls.address.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.address.errors.required\\\"  class=\\\"error_msg\\\">\\n            Address is required.\\n      </div>    \\n      </div>\\n      </div>\\n       <br>\\n       <br>\\n<label style=\\\"color: blue\\\"><b>   Date Of Birth : </b></label>\\n      <div>\\n      <input type=\\\"date\\\" formControlName=\\\"dob\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.dob.invalid && (registerFormGroup.controls.dob.dirty||\\n      registerFormGroup.controls.dob.touched )\\\">\\n     <div *ngIf=\\\"registerFormGroup.controls.dob.errors.required\\\"  class=\\\"error_msg\\\">\\n      Date Of Birth is required.\\n     </div>    \\n     </div>\\n     </div>\\n       <br>\\n       <br>\\n      <label style=\\\"color: blue\\\"><b>Organization Name : </b></label>\\n      <div>\\n      <input type=\\\"text\\\" formControlName=\\\"company\\\" >\\n      <div *ngIf=\\\"registerFormGroup.controls.company.invalid && (registerFormGroup.controls.company.dirty||\\n            registerFormGroup.controls.company.touched )\\\">\\n      <div *ngIf=\\\"registerFormGroup.controls.company.errors.required\\\"  class=\\\"error_msg\\\">\\n            Company is required.\\n      </div>    \\n      </div>\\n      </div>\\n       <br>\\n       <br>\\n\\n      <button id=\\\"Submit\\\" (click)=\\\"registerUserRecords(registerFormGroup)\\\" class=\\\"registerbtn\\\">Register</button>\\n  \\n      <br>\\n      <br>\\n       Already have an account? <a (click)=\\\"NavigateToLogin()\\\" style=\\\"color:green;cursor: pointer;\\\">Sign in</a>\\n  </form>\\n\\n\";","export default \"<h1 style=\\\"color: red;font-family: 'Times New Roman', Times, serif;text-align: center\\\">Employee Management System</h1>\\n<router-outlet></router-outlet>\";","export class CommonUrl {\n    private static BaseUrl:string=\"http://192.168.43.185:8080\";\n\n    public static getBaseHttpUrl()\n    {\n      return  this.BaseUrl;\n    }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvY3JlYXRlLWVtcGxveWVlL2NyZWF0ZS1lbXBsb3llZS5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { EmployeeService } from 'src/app/Services/employee.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SnackBarService } from 'src/app/Services/snack-bar.service';\nimport { CommonValidationServiceService } from 'src/app/Services/common-validation.service';\n\n@Component({\n  selector: 'app-create-employee',\n  templateUrl: './create-employee.component.html',\n  styleUrls: ['./create-employee.component.css']\n})\nexport class CreateEmployeeComponent implements OnInit {\n\n     employeesFormGroup:FormGroup\n\n     constructor(private formBuilder:FormBuilder,private employeeService:EmployeeService,private matDialog:MatDialog\n    ,private commonValidationService:CommonValidationServiceService,private snackBarService:SnackBarService)\n     { \n     }\n\n  ngOnInit(): void {\n\n    this.employeesFormGroup=this.commonValidationService.commonEmployeeFormGroup;\n    \n  }\n\n  SubmitEmployeeRecords(EmployeeFormGroup:FormGroup)\n  {\n    this.commonValidationService.validateWholeFormGroup(EmployeeFormGroup)\n    if(EmployeeFormGroup.valid)\n    {\n    this.matDialog.closeAll();\n   if(EmployeeFormGroup.get('empTrId').value==='')\n   {\n     this.employeeService.submitEmployeeRecord(EmployeeFormGroup.value).subscribe((flag)=>{\n     this.snackBarService.openSnackBar(flag)\n     this.commonValidationService.setStateToSubject(\"Load Employee List.\")\n     this.onClear()\n    });\n   }\n   else\n   {\n    this.employeeService.updateEmployeeRecord(EmployeeFormGroup.value).subscribe((flag)=>{\n    this.commonValidationService.setStateToSubject(\"Load Employee List.\")\n    this.snackBarService.openSnackBar(flag)\n    this.onClear()\n     });\n   }\n  }\n  }\n\n  CloseEmployeePopUp()\n  {\n    this.matDialog.closeAll();\n  }\n\n  onClear()\n  {\n    this.employeesFormGroup=this.commonValidationService.InitializeCommonFormGroup()\n  }\n\n}\n\n","export default \".createButton{\\n    float: right;\\n    position: relative;\\n    right: 265px;\\n    height: 45px;\\n    width: 143px;\\n    background-color: green\\n}\\n\\n.logoutButton{\\n    float: right;\\n    position: relative;\\n    bottom:70px;\\n    top:0px;\\n    right:15%;\\n    height: 45px;\\n    width: 100px;\\n    background-color:darkred\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQ29tcG9uZW50cy9lbXBsb3llZXMvZW1wbG95ZWVzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixZQUFZO0lBQ1osWUFBWTtJQUNaO0FBQ0o7O0FBRUE7SUFDSSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFlBQVk7SUFDWixZQUFZO0lBQ1o7QUFDSiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvZW1wbG95ZWVzL2VtcGxveWVlcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNyZWF0ZUJ1dHRvbntcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHJpZ2h0OiAyNjVweDtcbiAgICBoZWlnaHQ6IDQ1cHg7XG4gICAgd2lkdGg6IDE0M3B4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuXG59XG5cbi5sb2dvdXRCdXR0b257XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBib3R0b206NzBweDtcbiAgICB0b3A6MHB4O1xuICAgIHJpZ2h0OjE1JTtcbiAgICBoZWlnaHQ6IDQ1cHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ZGFya3JlZFxufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { TokenManagementService } from 'src/app/Services/token-management.service';\nimport { Router } from '@angular/router';\nimport { EmployeeService } from 'src/app/Services/employee.service';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CreateEmployeeComponent } from '../create-employee/create-employee.component';\n//import { CommonValidationServiceService } from 'src/app/Services/common-validation-service.service';\nimport { SnackBarService } from 'src/app/Services/snack-bar.service';\nimport { CommonValidationServiceService } from 'src/app/Services/common-validation.service';\n\n@Component({\n  selector: 'app-employees',\n  templateUrl: './employees.component.html',\n  styleUrls: ['./employees.component.css']\n})\nexport class EmployeesComponent implements OnInit {\n\n  employeesFormGroup:FormGroup\n  EmployeesList:any[]\n\n  constructor(private formBuilder:FormBuilder,private tokenService:TokenManagementService,private router:Router,\n    private employeeService:EmployeeService,private matDialog:MatDialog,private matDialogConfig:MatDialogConfig,\n    private commonValidationService:CommonValidationServiceService,private snackBarService:SnackBarService ){ \n      this.commonValidationService.getStateFromSubject().subscribe(\n        (StateChangeFlag)=>{\n          this.getAllEmployeesList();\n        }\n      )\n    }\n\n  ngOnInit(): void {\n\n    this.EmployeesList=[];\n    this.getAllEmployeesList();\n  }\n\n  logout()\n  {\n   //============Log Out===================\n   this.tokenService.clearTokenFromStorage();\n   this.router.navigateByUrl('/Login');\n\n  }\n  createEmployee()\n  {\n    let matdialogConfig=new MatDialogConfig();\n    matdialogConfig.disableClose=true;\n    matdialogConfig.autoFocus=true;\n    matdialogConfig.height='50%';\n    matdialogConfig.width='50%';\n    this.commonValidationService.setcommonEmployeeFormGroup();\n   this.matDialog.open(CreateEmployeeComponent,matdialogConfig);\n  }\n\n  getAllEmployeesList()\n  {\n    this.employeeService.getAllEmployeeRecord().subscribe(\n      (employeeList)=>{\n                        this.EmployeesList=employeeList;\n                        console.log(this.EmployeesList)\n      }\n    )\n  }\n\n  onUpdate(employeeDetails)\n  {\n    this.commonValidationService.populateForm(employeeDetails);     \n    console.log(employeeDetails)\n   //loaded Create Employee Component dynamically\n   let matdialogConfig=new MatDialogConfig();\n   matdialogConfig.disableClose=true;\n   matdialogConfig.autoFocus=true;\n   matdialogConfig.height='50%';\n   matdialogConfig.width='50%';\n   this.matDialog.open(CreateEmployeeComponent,matdialogConfig);\n    \n  }\n\n  onDelete(employeeDetails)\n  {\n    console.log(employeeDetails.empTrId)\n    this.employeeService.deleteEmployeeRecord(employeeDetails.empTrId).subscribe(\n      (Flag)=>{ \n               this.snackBarService.openSnackBar(Flag);\n              }\n    )\n  }\n\n  //=========For Performance optimization in case of delete and insert row into table=========\n  trackByEmployeeId(index:number,employee:any):string\n  {\n    return employee.employeeId;\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {FormGroup,FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TokenManagementService } from 'src/app/Services/token-management.service';\nimport { LoginService } from 'src/app/Services/login.service';\nimport { CommonValidationServiceService } from 'src/app/Services/common-validation.service';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginFormGroup:FormGroup;\n\n  constructor(private formBuilder:FormBuilder,private router:Router,\n    private tokenService:TokenManagementService,private loginService:LoginService\n    ,private commonValidationService:CommonValidationServiceService)\n    {\n\n    }\n\n  ngOnInit(): void\n  {\n    \n    //====If token available then redirect to home screen to avoid multitab login======\n    if(this.tokenService.checkTokenAvailability())\n    {\n     this.router.navigateByUrl('/Home');\n    }\n    this.InitializeLoginFormGroup();\n\n  }\n\n  InitializeLoginFormGroup()\n  {\n    this.loginFormGroup=this.formBuilder.group\n    ({\n       userName:[''],\n       password:['']\n    })\n  }\n\n  authencateCredentials(formGroup:FormGroup)\n  {\n   this.commonValidationService.validateWholeFormGroup(formGroup);\n  if(formGroup.valid)\n   {\n   this.loginService.authenticateUser(formGroup.value).subscribe(\n     (value)=>{\n         if(value!==null && value!=='')\n         {\n         this.tokenService.setTokenToLocalStorage(value);\n         this.router.navigateByUrl('/Home')\n         }\n         else\n         {\n           alert(\" Please Enter Correct UserName and Password .\")\n         }\n              },\n     (error)=>{ alert(error)}\n   )\n   }\n  }\n  NavigateToSignUp()\n  {\n    this.router.navigateByUrl('/SignUp')\n  }\n}\n\n\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0NvbXBvbmVudHMvc2lnbi11cC9zaWduLXVwLmNvbXBvbmVudC5jc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport {FormGroup,FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SignUpService } from 'src/app/Services/sign-up.service';\nimport {CommonValidationServiceService} from 'src/app/Services/common-validation.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n   registerFormGroup:FormGroup\n  constructor(private formBuilder:FormBuilder,private router:Router,private signUpService:SignUpService,\n    private commonValidationService:CommonValidationServiceService ) { }\n\n  ngOnInit(): void \n  {\n    this.InitailizeFormGroup();\n  }\n   \n  InitailizeFormGroup()\n  {\n    this.registerFormGroup=this.formBuilder.group(\n      {\n        firstName:[''],\n        lastName:[''],\n        password:[''],\n        emailAddress:[''],\n        address:[''],\n        dob:[''],\n        company:[''],\n      }\n      );\n  }\n\n  NavigateToLogin()\n  {\n   this.router.navigateByUrl('/Login');\n  }\n\n  registerUserRecords(formGroup:FormGroup)\n  {\n    this.commonValidationService.validateWholeFormGroup(formGroup);\n    if(formGroup.valid)\n    {\n    this.signUpService.registerRecords(formGroup.value).subscribe(\n     (flag)=>{\n              alert(flag)\n             }\n    );\n    }\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { FormGroup, FormBuilder, FormControl, AbstractControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonValidationServiceService {\n\n  commonEmployeeFormGroup:FormGroup;\n  private subject=new Subject();\n  constructor(private formBuilder:FormBuilder)\n   {\n    this.setcommonEmployeeFormGroup();\n   }\n\n   setcommonEmployeeFormGroup()\n   {\n    this.commonEmployeeFormGroup=this.InitializeCommonFormGroup();\n   }\n\n   InitializeCommonFormGroup()\n   {\n    return this.formBuilder.group({\n          empTrId:[''],\n       employeeId:[''],\nemployeefirstName:[''],\n employeelastName:[''],\n  employeeAddress:[''],\n      employeeDob:[''],\nemployeemMobileNo:[''],\n     employeeCity:[''],\n                   })\n   }\n\n  public setStateToSubject(state:any):void\n  {\n    this.subject.next(state);\n  }\n\n  public getStateFromSubject():Observable<any>\n  {\n    return this.subject;\n  }\n\n  public populateForm(employee:any):void\n  {\n    this.commonEmployeeFormGroup.setValue(employee) \n  }\n\n  public clearFormGroup(formGroup:FormGroup):void\n  {\n    Object.keys(formGroup).forEach(formControlKey=>{\n            let formControl=formGroup.get(formControlKey);\n            formControl.setValue('');\n    })\n  }\n\n  //===========Validate Whole Form Group=================\n  public validateWholeFormGroup(formGroup:FormGroup):void\n  {\n    Object.keys(formGroup).forEach(\n      (field)=>\n      {\n        const control=formGroup.get(field);\n        if(control instanceof FormControl)\n        {\n           control.markAsDirty({onlySelf:true});\n           control.markAsDirty({onlySelf:true})\n        }\n        else if( control instanceof FormGroup)\n        {\n            this.validateWholeFormGroup(control);\n        }\n\n      }\n    )\n  }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { CommonUrl } from '../CommonClasses/common-url';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  BaseUrl=CommonUrl.getBaseHttpUrl();\n  constructor(private http:HttpClient) { }\n\n  submitEmployeeRecord(employeeDetails:any):Observable<any>\n  {\n    return this.http.post(this.BaseUrl+'/createEmployee',{employeeDetails},{responseType:'text'});\n  }\n\n  updateEmployeeRecord(employeeDetails:any):Observable<any>\n  {\n    return this.http.put(this.BaseUrl+'/updateEmployee',{employeeDetails},{responseType:'text'});\n  }\n\n  deleteEmployeeRecord(employeeId:any):Observable<any>\n  {\n    let params:HttpParams=new HttpParams().set(\"empId\",employeeId);\n    return this.http.delete(this.BaseUrl+'/deleteEmployee',{params,responseType:'text'});\n  }\n\n  getAllEmployeeRecord():Observable<any>\n  {\n    return this.http.get(this.BaseUrl+'/getAllEmployeesRecords');\n  }\n\n\t}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CommonUrl } from '../CommonClasses/common-url';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  //==============Get Base Url =========\n  BaseUrl=CommonUrl.getBaseHttpUrl();\n  constructor(private http:HttpClient) { }\n\n  authenticateUser(userCredintials:any):Observable<any>\n  {\n    return this.http.post(this.BaseUrl+'/authenticate',userCredintials,{responseType:'text'});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CommonUrl } from '../CommonClasses/common-url';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignUpService {\n\n   //==============Get Base Url =========\n   BaseUrl=CommonUrl.getBaseHttpUrl();\n   constructor(private http:HttpClient) { }\n\n  registerRecords(registerDetails:FormGroup):Observable<any>\n  {\n   return this.http.post(this.BaseUrl+'/register',{registerDetails},{responseType:'text'});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  MatSnackBar,\n  MatSnackBarConfig,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n  MatSnackBarRef\n} from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackBarService {\n  \n  snackBarConfig: MatSnackBarConfig;\n  snackBarRef: MatSnackBarRef<any>;\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'top';\n  snackBarAutoHide = '1500';\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  openSnackBar(message:any) {\n\n    this.snackBarConfig = new MatSnackBarConfig();\n    this.snackBarConfig.horizontalPosition = this.horizontalPosition;\n    this.snackBarConfig.verticalPosition = this.verticalPosition;\n    this.snackBarConfig.duration = parseInt(this.snackBarAutoHide, 0);\n    this.snackBarConfig.panelClass = 'glam-snackbar';\n\n    this.snackBarRef = this.snackBar.open(message, '', this.snackBarConfig);\n}\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler,HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TokenManagementService } from './token-management.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private tokenService:TokenManagementService,private router:Router) { }\n\n  intercept(request:HttpRequest<any>,next:HttpHandler):Observable<HttpEvent<any>>\n  {\n    let modifiedRequest=this.addTokenToRequest(request);\n    console.log(modifiedRequest)\n   return next.handle(modifiedRequest).pipe(\n     //==================Error/Exception Handling Code=============\n     catchError((errorResponse:HttpErrorResponse)=>{\n       let errorMassage:any;\n       if(errorResponse.error instanceof ErrorEvent)\n       {\n        errorMassage=\"Client Side Error Occured.\"\n       }\n       else\n       {\n         //==========if token expired =================\n         if(errorResponse.status==401 || errorResponse.status==403)\n         {\n           alert(\"There was an error trying to log you in.\")\n           this.tokenService.clearTokenFromStorage();\n           this.router.navigateByUrl('/Login');\n         }\n         else if(errorResponse.status==0 && (errorResponse.url==null|| errorResponse.url!=null )) //i.e Progress Event \n         {\n          errorMassage=\"Network Error:Connection Timed Out.\"\n         }\n         else\n         {\n           console.log(errorResponse)\n          errorMassage=\"Server Side Error Occured.\"\n         }\n       }\n\n       //========return Custom error notification to Observer==========\n      return throwError (errorMassage);\n     })\n   )\n\n  }\n\n  addTokenToRequest(request:HttpRequest<any>):HttpRequest<any>\n  {\n    let token=this.tokenService.getTokenFromLocalStorage();\n    if(token)\n    {\n     return request.clone(\n      {\n        setHeaders:{\n                    'Access-Control-Allow-Origin':'*',\n                    'Authorization':`Bearer${token}`,\n                   }\n      }\n      )\n    }\n    return request;\n  }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport {jwt_decode} from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenManagementService {\n\n  constructor() { }\n  checkTokenAvailability():boolean\n  {\n    return localStorage.getItem('UserDetails')!=null;\n  }\n\n  setTokenToLocalStorage(Token:string)\n  {\n    localStorage.setItem('UserDetails',Token);\n  }\n\n  getTokenFromLocalStorage():string\n  {\n    return localStorage.getItem('UserDetails');\n  }\n\n  getUserdetailsFromToken(token:string):any\n  {\n   return jwt_decode(token);\n  }\n\n  clearTokenFromStorage()\n  {\n    localStorage.removeItem('UserDetails');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport{LoginComponent} from \"./Components/login/login.component\";\nimport{SignUpComponent} from \"./Components/sign-up/sign-up.component\";\nimport{EmployeesComponent} from \"./Components/employees/employees.component\";\n\nconst routes: Routes = [\n  \n  { path:'',redirectTo:'Login',pathMatch:'full'},\n  { path:'Login' ,component:LoginComponent,},\n  { path:'SignUp' ,component:SignUpComponent},\n  { path:'Home' ,component:EmployeesComponent,}//canActivate:[AuthenticationGuardService]},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'EmployeeManagement';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {ReactiveFormsModule} from '@angular/forms'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SignUpComponent } from './Components/sign-up/sign-up.component';\nimport { LoginComponent } from './Components/login/login.component';\nimport { EmployeesComponent } from './Components/employees/employees.component';\nimport { TokenInterceptorService } from './Services/token-interceptor.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport { MatDialogModule, MatDialog, MatDialogConfig } from '@angular/material/dialog';\n//import { CreateEmployeeComponent } from './Components/create-employee/create-employee.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n//import { MatConfirmDialogComponent} from './Components/mat-confirm-dialog/mat-confirm-dialog.component';\nimport { from } from 'rxjs';\nimport { CreateEmployeeComponent } from './Components/create-employee/create-employee.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignUpComponent,\n    EmployeesComponent,\n    CreateEmployeeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatDialogModule, MatInputModule, MatButtonModule, MatCardModule, MatFormFieldModule,\n  ],\n  providers: [\n    MatDialog,MatDialogConfig,MatSnackBar,\n    { provide:HTTP_INTERCEPTORS,useClass:TokenInterceptorService,\n      multi:true \n    }\n  ],\n // entryComponents:[CreateEmployeeComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}